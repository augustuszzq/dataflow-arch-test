param memcpyParams: comptime_struct;
param c2dParams: comptime_struct;
//param gemmParams: comptime_struct;

param Mt;
param Nt;

//const gemm_mod = @import_module("gemm/pe.csl",gemmParams)
//const softmax_mod =



////////////////////////////////////////////////////////////////////////////////
// Main memory (48KB)
////////////////////////////////////////////////////////////////////////////////

var Q_tile = @zeros([Mt*Nt]f32);
var K_tile = @zeros([Nt*Mt]f32);
var V_tile = @zeros([Mt*Nt]f32);
var ptr_Q: [*]f32 = &Q_tile;
var ptr_K: [*]f32 = &K_tile;
var ptr_V: [*]f32 = &V_tile;



////////////////////////////////////////////////////////////////////////////////
// Tasks
// syntax
//     task_begin(name, entrypoint, color)
////////////////////////////////////////////////////////////////////////////////

const gemm_mod = @import_module("gemm/pe.csl",.{
    .memcpyParams = memcpyParams,
    .c2dParams = c2dParams,
    .Mt = Mt, .Nt = Nt,
    });


fn f_gemm() void {
    gemm_mod.gemm(Mt,Nt,Mt,&Q_tile, &K_tile);
}


comptime{

    //@export_symbol(f_gemm);
    @export_symbol(ptr_Q,"Q_tile");
    @export_symbol(ptr_K,"K_tile");
    @export_symbol(ptr_V,"V_tile");
}
